# --- Use SAME logic as Real-Time Streaming ---
try:
    # Create DataFrame identical to live_stream output
    row = pd.DataFrame([sim_row])

    # Clean features just like live_stream()
    features = clean_features_for_model(row)

    # Predict using XGBoost
    xgb_prob = float(xgb_model.predict_proba(features)[0][1]) if xgb_model is not None else 0.0

    # Predict using LSTM
    try:
        scaled = scaler.transform(features)
        if "sim_seq" not in st.session_state:
            st.session_state.sim_seq = []
        st.session_state.sim_seq.append(scaled.flatten())

        if len(st.session_state.sim_seq) >= DEFAULT_LSTM_TIMESTEPS:
            lstm_input = np.array(st.session_state.sim_seq[-DEFAULT_LSTM_TIMESTEPS:]).reshape(
                1, DEFAULT_LSTM_TIMESTEPS, features.shape[1]
            )
            lstm_prob = float(lstm_model.predict(lstm_input, verbose=0)[0][0])
        else:
            lstm_prob = 0.0
    except Exception:
        lstm_prob = 0.0

    # Combine probabilities (same as streaming logic)
    combined = (xgb_prob + lstm_prob)
    last_prob = st.session_state.get("last_sim_prob", combined)
    smooth = last_prob + (combined - last_prob)
    st.session_state["last_sim_prob"] = smooth

    # Render the gauge
    render_gauge(smooth, green_threshold, yellow_threshold)

    # Update charts (for visual continuity)
    chart_xgb.add_rows(pd.DataFrame({"xgb_prob": [xgb_prob]}))
    chart_lstm.add_rows(pd.DataFrame({"lstm_prob": [lstm_prob]}))

    # Update status area
    zone_txt, color, desc = zone_label(smooth, green_threshold, yellow_threshold)
    status_area.markdown(f"""
        <div style="padding:12px;border-radius:12px;background:rgba(255,255,255,0.03);
            border-left:6px solid {color};box-shadow:0 0 18px {color}60;">
        <h3 style="margin:0;color:{color};font-size:22px">{zone_txt} (Simulator)</h3>
        <p style="margin:4px 0;font-size:14px;color:white">{desc}</p>
        <p style="margin:4px 0;color:lightgray">
        Combined Probability: <b style="color:{color}">{smooth:.3f}</b></p>
        </div>
    """, unsafe_allow_html=True)

except Exception as e:
    st.error(f"‚ùå Simulation Error: {e}")